#!/bin/bash

### Colors ###

RED="\e[31m"
YELLOW="\e[33m"
GREEN="\e[32m"
BLUE="\e[36m"
WHITE="\e[37m"
PURPLE="\e[35m"
ENDCOLOR="\e[0m"

### Variables ###

aVALUE=0
nVALUE=''
pVALUE='-p-'
s=''
USER=(admin _apt backup mysql root www-data sshd oracle user 4Dgifts abrt adm administrator umountfsys umountsys unix unscd us_admin usbmux uucp uucpadm uuidd vagrant varnish web webmaster whoopsie www xpdb xpopr zabbix)

### Functions ###

banner(){

	echo "
	DUCKYSCAN beta 1.2.3 ( h4ckduck )
	Usage: 	duckyscan [IP] [OPTIONS]
		duckyscan [OPTIONS]

	OPTIONS:
	  -x --> Install (or upgrade) the missing packages 
	  -h --> Display this info
	  -a --> Scan ports with scripts
	  -p --> Scan the chosen port/s
	  -n --> Save the Nmap scan
	  -s --> Save the scan in scan.hduck

	EXAMPLES:
	  duckyscan -a 192.168.0.0 -s
	  duckyscan -x
	  duckyscan -p 22,80,445 192.168.0.0
	  "
}

installDEP(){

	sudo apt install -y nmap
	sudo apt install -y exploitdb
	sudo apt install -y whatweb
	sudo apt install -y smbclient
	sudo apt install -y netcat
	sudo apt install -y dnsutils
	echo -e "\n${GREEN}[✓]${ENDCOLOR} Finished. Now you can use duckyscan"
}

verifyDEP(){

	which nmap > /dev/null 2> /dev/null
	if [[ $? == 1 ]];
	then
		echo -e "\n${RED}[]${ENDCOLOR} ERROR: There are missing packages. Please execute 'duckyscan -x' to install them"
		exit
	fi
	which searchsploit > /dev/null 2> /dev/null
	if [[ $? == 1 ]];
	then
		echo -e "\n${RED}[]${ENDCOLOR} ERROR: There are missing packages. Please execute 'duckyscan -x' to install them"
		exit
	fi
        which whatweb > /dev/null 2> /dev/null
        if [[ $? == 1 ]];
        then
                echo -e "\n${RED}[]${ENDCOLOR} ERROR: There are missing packages. Please execute 'duckyscan -x' to install them"
                exit
        fi
        which smbclient > /dev/null 2> /dev/null
        if [[ $? == 1 ]];
        then
                echo -e "\n${RED}[]${ENDCOLOR} ERROR: There are missing packages. Please execute 'duckyscan -x' to install them"
                exit
        fi
        which netcat > /dev/null 2> /dev/null
        if [[ $? == 1 ]];
        then
                echo -e "\n${RED}[]${ENDCOLOR} ERROR: There are missing packages. Please execute 'duckyscan -x' to install them"
                exit
        fi
        which nslookup > /dev/null 2> /dev/null
        if [[ $? == 1 ]];
        then
                echo -e "\n${RED}[]${ENDCOLOR} ERROR: There are missing packages. Please execute 'duckyscan -x' to install them"
                exit
        fi

}
sendPING() {

	ping -c 1 $TARGET > /dev/null
	if [ $? -eq 0 ];
	then
		eval echo -e "\${GREEN}[✓]\${ENDCOLOR} The machine is up" $s 
		detectOS
	
	elif [ $? -eq 1 ];
	then
		eval echo -e "\${YELLOW}[!]\${ENDCOLOR} WARNING. The machine does not seems to be up" $s
	fi
}

detectOS(){

	ttl="$(ping $TARGET -c 1 | grep -oP 'ttl=\d{1,5}' | awk '{print $2}' FS='=')"
	if [ $ttl -gt 128 ];
	then
		eval echo -e "\${YELLOW}[!]\${ENDCOLOR} Unknown operative system (ttl = '$ttl')" $s

	elif [[ $ttl -gt 64 ]];
	then
		eval echo -e "\${BLUE}[*]\${ENDCOLOR} Operative system --'>' Windows" $s

	elif [[ $ttl -le 64 ]];
	then
		eval echo -e "\${BLUE}[*]\${ENDCOLOR} Operative system --'>' Linux" $s
	fi
}

exploitScan() {

	for i in {1..65536}
	do
		EXPLOITfull="$(echo -e $VERSIONS | awk "{print \$$i}" FS=',' )"
		EXPLOIT="$(echo -e $VERSIONS | awk "{print \$$i}" FS=',' | awk '{print $1}' FS='.')"
		if [[ -n $EXPLOITfull ]];
		then
			SEARCHSPLOITarray[$i]="$(searchsploit $EXPLOIT 2> /dev/null)"
		fi
		if [[ $i == $numberPORTS ]];
                then
                	break
		fi		

	done
}

cPORTSarray(){

	for i in {1..65536}
        do
                if [[ "$(echo $PORTS | awk "{print \$$i}" FS=',')" == '' ]];
                then
                	break

                fi
        	PORTSarray[$i]="$(echo $PORTS | awk "{print \$$i}" FS=',')"
		openPORTS[${PORTSarray[$i]}]='a'
        done
	numberPORTS=${#PORTSarray[@]}
}

cVERSIONarray(){

	for i in {1..65536}
        do
		VERSIONarray[$i]="$(cat /tmp/nmap | grep //  | tr "," "\n" | awk '{print $7}' FS='/' | tr "\n" "," | awk "{print \$$i}"   FS=',')"
		if [[ $i == $numberPORTS ]];
		then
			break
		fi
	done
}

results() {

	eval echo -e "'\n''\t'RESULTS'\n'_______________________'\n'" $s

	for i in {1..65536} #Modify to the size of PORTSarray
	do

		if [[ "$(echo $PORTS | awk "{print \$$i}" FS=',')" == '' ]];
        	then
	        	break
                fi
		eval echo -e "\${BLUE}PORT'('open')' '${PORTSarray[$i]}' --'>' '${VERSIONarray[$i]}'\${ENDCOLOR}" $s
		if [[ ${openPORTS[${PORTSarray[$i]}]} == 'a' && $aVALUE == 1 ]]
		then
			evalPORTS ${PORTSarray[$i]}
		fi
		eval echo -e "'\n''${SEARCHSPLOITarray[$i]}''\n''\n'" $s
	done
}

evalPORTS(){

	if [[ $1 == '21' ]];
	then
		eval echo -e "'\n'\${YELLOW}----- FTP -----\${ENDCOLOR}" $s
		ftpOUTPUT="$(ftp -n $TARGET <<EOF 
user anonymous anonymous 
EOF
)"

		if [[ $ftpOUTPUT == '' ]];
		then
			eval echo "Login succesfull with user':'password --'>' anonymous':'anonymous" $s
		else
			eval echo "Login not succesfull" $s
		fi

	elif [[ $1 == '25' ]];
	then
		eval echo -e "'\n'\${YELLOW}----- NETCAT -----\${ENDCOLOR}" $s
		sudo touch /tmp/duckyScanUser.txt
		sudo chmod 666 /tmp/duckyScanUser.txt
		for i in {0..500}
		do
			if [[ ${USER[$i]} == '' ]];
                  	then
                        	break
                  	fi
			echo "VRFY ${USER[$i]}" >> /tmp/duckyScanUser.txt
		done
		echo quit >> /tmp/duckyScanUser.txt
		smtpUSER="$(timeout 15s nc $TARGET 25 < /tmp/duckyScanUser.txt | grep 252 | awk 'NF>1{print $NF}' )"
		if [[ -z $smtpUSER ]];
		then
			eval echo "Users not found" $s
		else
			eval echo "User/s found: '$smtpUSER'" $s
		fi
		sudo rm -r /tmp/duckyScanUser.txt

	elif [[ $1 == '53' ]];
	then
		eval echo -e "'\n'\${YELLOW}----- NSLOOKUP -----\${ENDCOLOR}" $s
		DOMAIN="$(nslookup -timeout=1 $TARGET $TARGET | grep name | awk '{print $2}' FS='=' | sed 's/ //g' | sed 's/.$//')"
		if [[ -z $DOMAIN ]];
		then
			eval echo "Domain not found" $s
		else
			eval echo "Domain found: '$DOMAIN'" $s
			cat /etc/hosts | grep $DOMAIN > /dev/null
			if [[ $? == '1' ]];
			then
				eval echo "Saving domain in /etc/hosts..." $s
				echo "$TARGET	$DOMAIN" | sudo tee -a /etc/hosts > /dev/null
				eval echo -e "\${GREEN}[✓]\${ENDCOLOR} Domain saved in /etc/hosts" $s
			fi
			eval echo -e "'\n'\${YELLOW}----- DIG -----\${ENDCOLOR}" $s
			eval echo "Making a zone transfer... '('axfr')'" $s
			SUBDOMAINS="$(dig axfr @$TARGET $DOMAIN | grep -F .$DOMAIN  | awk '{print $1}' FS="[.]$DOMAIN" | while read line; do [ -z "$line" ] && continue ;echo ${line##* }; done | sed "s/$/.$DOMAIN/" | sort -u | xargs)" 
			if [[ -z $SUBDOMAINS ]];
			then
				eval echo "Subdomain/s not found" $s
			else
				eval echo "Subdomain/s found: '$SUBDOMAINS'" $s
				cat /etc/hosts | grep "$SUBDOMAINS" > /dev/null
                        	if [[ $? == '1' ]];
                        	then
                               		eval echo "Saving subdomain/s in /etc/hosts..." $s
                               		echo "$TARGET	$SUBDOMAINS" | sudo tee -a /etc/hosts > /dev/null
                               		eval echo -e "\${GREEN}[✓]\${ENDCOLOR} Subdomain/s saved in /etc/hosts" $s
				fi
			fi
		fi

	elif [[ $1 == '80' ]] || [[ $1 == '443' ]];
        then
                eval echo -e "'\n'\${YELLOW}----- WHATWEB -----\${ENDCOLOR}" $s
                eval timeout 15s whatweb '$TARGET' $s
        
	elif [[ $1 == '445' ]];
	then
		eval echo -e "'\n'\${YELLOW}----- SMBCLIENT -----\${ENDCOLOR}" $s
		eval timeout 15s smbclient  -N -L '$TARGET' $s
	fi
	

}
clean() {

	sudo rm -r "/tmp/nmap"
	sudo chmod 666 nmapScan 2> /dev/null 
}
### Program ###

#mapfile -t my_array < <( nmap 192.168.1.1 )
#echo -e ${my_array[5]}

sudo whoami > /dev/null

if [[ -z $1 ]];
then
	banner
	exit
fi
args=("$@")
for (( i = 0; i < $#; i++ ))
do
	if [[ ${args[$i]} == '-h' ]]
        then
        	banner
                exit
      
        elif [[ ${args[$i]} == '-x' ]]
        then
        	installDEP
                exit
        
	elif [[ ${args[$i]} == '-a' ]];
	then
		aVALUE=1

	elif [[ ${args[$i]} == '-n' ]];
	then
		nVALUE='-oN nmapScan'

	elif [[ ${args[$i]} == '-p' ]];
	then
		i=$((i+1))
		pVALUE="-p ${args[$i]}"
		echo $pVALUE

	elif [[ ${args[$i]} == '-s' ]];
	then
		s='| tee -a scan.hduck'
		rm scan.hduck 2> /dev/null
		touch scan.hduck
        else
        	TARGET=${args[$i]}
        fi
done

eval echo -e "'\n'\${BLUE}[*]\${ENDCOLOR} Sending a PING to $TARGET..." $s

sendPING

eval echo -e "\${BLUE}[*]\${ENDCOLOR} Scanning ports of $TARGET..." $s
sudo nmap $pVALUE $TARGET -Pn -sS --min-rate 5000 -oG /tmp/nmap > /dev/null 2> /dev/null

PORTS="$(cat /tmp/nmap | grep -oP '\d{1,5}/open' | awk '{print $1}' FS='/' | xargs | tr ' ' ',')"
SERVICES="$(cat /tmp/nmap | grep //  | tr "," "\n" | awk '{print $2}' FS='//' | xargs  | tr ' ' ',')"
if [[ $PORTS == '' ]];
then
	eval echo -e "\${RED}[]\${ENDCOLOR} The IP has no open ports" $s
	clean
	exit
fi
eval echo -e "\${BLUE}[*]\${ENDCOLOR} Discovered open ports: \${PURPLE}$PORTS\${ENDCOLOR} - \${PURPLE}$SERVICES\${ENDCOLOR}" $s 
eval echo -e "\${BLUE}[*]\${ENDCOLOR} Scanning services..." $s
sudo nmap -p $PORTS -sV $TARGET -Pn -sS --min-rate 5000 -oG /tmp/nmap $nVALUE > /dev/null 2> /dev/null

VERSIONS="$(cat /tmp/nmap | grep //  | tr "," "\n" | awk '{print $7}' FS='/' | tr "\n" ",")"
eval echo -e "\${BLUE}[*]\${ENDCOLOR} Discovered services and versions: \${PURPLE}'$VERSIONS'\${ENDCOLOR}" $s
eval echo -e "\${BLUE}[*]\${ENDCOLOR} Scanning for known exploits..." $s

cPORTSarray
cVERSIONarray
exploitScan

eval echo -e "\${BLUE}[*]\${ENDCOLOR} Printing results..." $s

results

clean
